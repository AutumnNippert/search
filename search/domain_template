Here is the class template for creating a new domain.

#include "../utils/utils.hpp"
#include <cstdio>

struct <DOMAIN> {

	enum { UnitCost = <UNITCOST?> };

	typedef <COST> Cost;
	static const <COST> InfCost = …;
	typedef <OPER> Oper;
	static const <OPER> Nop = …;

	<DOMAIN>(FILE*);

	struct State {	…	};

	struct PackedState {
		…
		unsigned long hash(void) { return -1; }
		bool eq(PackedState &) const { return false; }
	};

	struct Undo {
		Undo(State&, Oper) {		…	}
	};

	State initialstate(void);

	Cost h(State &s) {
		fatal("Unimplemented");
		return 0.0;
	}

	bool isgoal(State &s) {
		fatal("Unimplemented");
		return false;
	}

	unsigned int nops(State &s) {
		fatal("Unimplemented");
		return 0;
	}

	Oper nthop(State &s, unsigned int n) {
		fatal("Unimplemented");
		return 0;
	}

	Oper revop(State &s, Oper op) {
		fatal("Unimplemented");
		return 0;
	}

	Cost opcost(State &s, Oper op) {
		fatal("Unimplemented");
		return 0;
	}

	void undo(State &s, Undo &u) { }

	State &apply(State &buf, State &s, Oper op) {
		fatal("Unimplemented");
		return s;
	}

	void pack(PackedState &dst, State &src) {
		fatal("Unimplemented");
	}

	State &unpack(State &buf, PackedState &pkd) {
		fatal("Unimplemented");
		return buf;
	}

	void dumpstate(FILE *out, State &s) {
		fatal("Unimplemented");
	}
};